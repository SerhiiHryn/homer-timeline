{"version":3,"sources":["add-event-button.svg","thumbnail.jpg","components/UI/Input/Input.js","components/UI/Loader/Loader.js","redux/actions/event.actions.js","redux/types/event.types.js","components/AddEvent/AddEvent.js","utils.js","components/Event/Event.js","components/EventList/EventList.js","components/EventsDivider/EventsDivider.js","components/Timeline/Timeline.js","App.js","services/event.service.js","redux/reducers/event.reducer.js","redux/reducers/index.js","redux/sagas/event.sagas.js","redux/sagas/rootSaga.js","redux/store.js","serviceWorker.js","index.js"],"names":["module","exports","Input","label","value","name","id","type","placeholder","onChange","className","htmlFor","Loader","eventActions","show","payload","data","newEvent","event","error","events","AddEvent","dispatch","useDispatch","useSelector","state","loading","showNewEventForm","inputChangeHandler","target","addEventHandler","a","toggleEventForm","src","addEventButton","alt","onClick","title","discription","tag","thumbnail","date","utils","Date","toLocaleDateString","undefined","year","month","day","getTime","now","Event","showYear","getFullYear","getEventYear","description","EventList","years","map","e","eventYear","includes","push","Fragment","key","EventsDivider","Timeline","pastEvents","futureEvents","hasFutureEvents","length","hasPastEvents","classes","join","App","useEffect","eventService","addEvent","Promise","resolve","setTimeout","JSON","parse","localStorage","getItem","setItem","stringify","getEvents","sortEvents","forEach","this","orderEvents","sort","by","order","initialState","rootReducer","combineReducers","action","addEventWorker","getEventsWorker","put","call","eventSagas","takeEvery","rootSaga","all","saga","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.90151f85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add-event-button.c3e113c1.svg\";","module.exports = __webpack_public_path__ + \"static/media/thumbnail.0e9f86f2.jpg\";","import React from 'react';\nimport './Input.scss';\n\nconst Input = ({ label, value, name, id, type, placeholder, onChange }) => {\n  return (\n    <div className=\"input\">\n      { label ? <label className=\"label\" htmlFor={id}>{label}</label> : null}\n      <input\n        id={id}\n        name={name}\n        type={type}\n        value={value}\n        placeholder={placeholder}\n        onChange={onChange} />\n    </div>\n  );\n};\n\nexport default Input;\n","import React from 'react';\nimport './Loader.scss';\n\nconst Loader = () => {\n  return (\n    <div className=\"loader-container\">\n      <div className=\"lds-roller\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import {\n  ADD_EVENT,\n  ADD_EVENT_SUCCESS,\n  ADD_EVENT_ERROR,\n  GET_EVENTS,\n  GET_EVENTS_SUCCESS,\n  GET_EVENTS_ERROR,\n  LOADING_END,\n  LOADING_START, SHOW_NEW_EVENT_FORM, SET_NEW_EVENT\n} from '../types/event.types';\n\nexport const eventActions = {\n  loadingStart: () => ({ type: LOADING_START }),\n  loadingEnd: () => ({ type: LOADING_END }),\n\n  showForm: show => ({ type: SHOW_NEW_EVENT_FORM, payload: { data: show } }),\n\n  setNewEvent: newEvent => ({ type: SET_NEW_EVENT, payload: { data: newEvent } }),\n\n  addEvent: event => ({ type: ADD_EVENT, payload: { data: event } }),\n  addEventSuccess: event => ({ type: ADD_EVENT_SUCCESS, payload: { data: event } }),\n  addEventError: error => ({ type: ADD_EVENT_ERROR, payload: { error } }),\n\n  getEvents: () => ({ type: GET_EVENTS }),\n  getEventsSuccess: events => ({ type: GET_EVENTS_SUCCESS, payload: { data: events } }),\n  getEventsError: error => ({ type: GET_EVENTS_ERROR, payload: { error } }),\n};\n","export const LOADING_START = 'EVENT/LOADING_START';\nexport const LOADING_END = 'EVENT/LOADING_END';\n\nexport const SHOW_NEW_EVENT_FORM = 'EVENT/SHOW_NEW_EVENT_FORM';\n\nexport const SET_NEW_EVENT = 'EVENT/SET_NEW_EVENT';\n\nexport const ADD_EVENT = 'EVENT/ADD_EVENT';\nexport const ADD_EVENT_SUCCESS = 'EVENT/ADD_EVENT_SUCCESS';\nexport const ADD_EVENT_ERROR = 'EVENT/ADD_EVENT_ERROR';\n\nexport const GET_EVENTS = 'EVENT/GET_EVENTS';\nexport const GET_EVENTS_SUCCESS = 'EVENT/GET_EVENTS_SUCCESS';\nexport const GET_EVENTS_ERROR = 'EVENT/GET_EVENTS_ERROR';\n","import React from 'react';\nimport Input from '../UI/Input/Input';\nimport addEventButton from '../../add-event-button.svg';\nimport Loader from '../UI/Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { eventActions } from '../../redux/actions/event.actions';\nimport './AddEvent.scss';\n\nconst AddEvent = () => {\n  const dispatch = useDispatch();\n  const { loading, showNewEventForm, newEvent } = useSelector(state => state.event);\n\n  const inputChangeHandler = (event) => {\n    dispatch(eventActions.setNewEvent({\n      ...newEvent,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  const addEventHandler = async () => {\n    dispatch(eventActions.addEvent(newEvent));\n  };\n\n  const toggleEventForm = () => {\n    // TODO fix reseting newEvent\n    dispatch(eventActions.setNewEvent({}));\n    dispatch(eventActions.showForm(!showNewEventForm));\n  };\n\n  return (\n    <div className=\"add-event-container\">\n      <div className=\"add-button\">\n        <img src={addEventButton} alt=\"add-event\" onClick={toggleEventForm} />\n        <div className={`event-form ${showNewEventForm ? 'show' : ''}`}>\n          {loading ? <Loader /> : null}\n          <div className=\"event-form__title\">Add a new event</div>\n          <div className=\"event-form__cancel-btn\" onClick={toggleEventForm}>&times;</div>\n          <div className=\"event-form__fields\">\n            <Input\n              name=\"title\"\n              type=\"text\"\n              value={newEvent.title}\n              placeholder=\"Enter title\"\n              onChange={inputChangeHandler} />\n            <Input\n              name=\"description\"\n              type=\"text\"\n              value={newEvent.discription}\n              placeholder=\"Enter description\"\n              onChange={inputChangeHandler} />\n            <Input\n              name=\"tag\"\n              type=\"text\"\n              value={newEvent.tag}\n              placeholder=\"Enter tag\"\n              onChange={inputChangeHandler} />\n            <Input\n              name=\"thumbnail\"\n              type=\"file\"\n              value={newEvent.thumbnail}\n              placeholder=\"Add image\"\n              onChange={inputChangeHandler} />\n            <Input\n              name=\"date\"\n              type=\"datetime-local\"\n              value={newEvent.date}\n              placeholder=\"Choose date\"\n              onChange={inputChangeHandler} />\n          </div>\n          <div className=\"event-form__save-button\">\n            <button onClick={addEventHandler}>Save and Publish</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddEvent;\n","export const utils = {\n  formatDate(date) {\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n\n    return new Date(date).toLocaleDateString(undefined, options);\n  },\n  isFutureEvent(date) {\n    if (!date) return false;\n    return new Date(date).getTime() > Date.now();\n  },\n};\n","import React from 'react';\nimport thumbnail from '../../thumbnail.jpg';\nimport { utils } from '../../utils';\nimport './Event.scss';\n\nfunction getEventYear(event) {\n  return new Date(event.date).getFullYear();\n}\n\nconst Event = ({ event, showYear }) => {\n  return (\n    <>\n      {showYear ? <span className=\"event-year\">{getEventYear(event)}</span> : null}\n      <div className=\"event-container\">\n        <div className={`event ${utils.isFutureEvent(event.date) ? 'future' : ''}`}>\n          <div className=\"event__thumbnail\">\n            <img src={thumbnail} alt={event.tag} />\n          </div>\n          <div className=\"event__tag\">{event.tag}</div>\n          <div className=\"event__title\">\n            <div className=\"event__title__connector-line\"></div>\n            <div className=\"event__title__text\">{event.title}</div>\n          </div>\n          <div className=\"event__description\">{event.description}</div>\n          <div className=\"event__date\">{utils.formatDate(event.date)}</div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Event;\n","import React from 'react';\nimport Event from '../Event/Event';\nimport './EventList.scss';\n\nconst EventList = ({ events }) => {\n  const years = [];\n  return (\n    <div className=\"events\">\n      {\n        events.map(e => {\n          const eventYear = new Date(e.date).getFullYear();\n          const showYear = !years.includes(eventYear);\n\n          if (showYear) {\n            years.push(eventYear);\n          }\n\n          return (\n            <React.Fragment key={e.id}>\n              {/* { eventYearWasRendered ? null : <div>{eventYear}</div>} */}\n              <Event event={e} showYear={showYear} />\n            </React.Fragment>\n          );\n        })\n      }\n    </div>\n  );\n};\n\nexport default EventList;\n","import React from 'react';\nimport './EventsDivider.scss';\n\nconst EventsDivider = () => {\n  return (\n    <div className=\"divider-container\">\n      <div className=\"divider\"></div>\n    </div>\n  );\n};\n\nexport default EventsDivider;\n","import React from 'react';\nimport AddEvent from '../AddEvent/AddEvent';\nimport EventList from '../EventList/EventList';\nimport EventsDivider from '../EventsDivider/EventsDivider';\nimport './Timeline.scss';\n\nconst Timeline = ({ pastEvents, futureEvents }) => {\n  const hasFutureEvents = !!futureEvents.length;\n  const hasPastEvents = !!pastEvents.length;\n\n  const classes = ['timeline'];\n\n  if (!hasFutureEvents && !hasPastEvents) {\n    classes.push('center');\n  }\n\n  return (\n    <div className={classes.join(' ')}>\n      {hasFutureEvents ? <EventList events={futureEvents} /> : null}\n      {hasFutureEvents ? <EventsDivider /> : null}\n      <AddEvent />\n      {hasPastEvents ? < EventList events={pastEvents} /> : null}\n    </div >\n  );\n};\n\nexport default Timeline;\n","import React, { useEffect } from 'react';\nimport Timeline from './components/Timeline/Timeline';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { eventActions } from './redux/actions/event.actions';\nimport './App.scss';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const { pastEvents, futureEvents } = useSelector(state => state.event);\n\n\n  useEffect(() => {\n    dispatch(eventActions.getEvents());\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <Timeline pastEvents={pastEvents} futureEvents={futureEvents} />\n    </div>\n  );\n}\n\nexport default App;\n","import sort from 'sort-array';\nimport { utils } from '../utils';\n\nconst EVENTS_STORAGE_KEY = 'events';\n\nexport const eventService = {\n  addEvent(event) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const events = JSON.parse(localStorage.getItem(EVENTS_STORAGE_KEY) || '[]');\n        event.id = Date.now();\n        events.push(event);\n        localStorage.setItem(EVENTS_STORAGE_KEY, JSON.stringify(events));\n\n        resolve(event);\n      }, 1000);\n    });\n  },\n  getEvents() {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const events = JSON.parse(localStorage.getItem(EVENTS_STORAGE_KEY) || '[]');\n        resolve(events);\n      }, 1000);\n    });\n  },\n  sortEvents(events) {\n    const pastEvents = [];\n    const futureEvents = [];\n\n    events.forEach(event => {\n      utils.isFutureEvent(event.date) ? futureEvents.push(event) : pastEvents.push(event);\n    });\n\n    this.orderEvents(pastEvents);\n    this.orderEvents(futureEvents);\n\n    return {\n      pastEvents,\n      futureEvents,\n    };\n  },\n  orderEvents(events) {\n    sort(events, { by: 'date', order: 'desc' });\n  },\n};\n","import { eventService } from '../../services/event.service';\nimport { utils } from '../../utils';\nimport {\n  ADD_EVENT_SUCCESS,\n  GET_EVENTS_SUCCESS,\n  LOADING_END,\n  LOADING_START,\n  SET_NEW_EVENT,\n  SHOW_NEW_EVENT_FORM\n} from '../types/event.types';\n\nconst initialState = {\n  pastEvents: [],\n  futureEvents: [],\n  showNewEventForm: false,\n  newEvent: {},\n  loading: false,\n  error: null,\n};\n\nexport const eventReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_EVENT_SUCCESS: {\n      const event = action.payload.data;\n\n      if (utils.isFutureEvent(event.date)) {\n        const futureEvents = [...state.futureEvents, event];\n        return { ...state, futureEvents };\n      } else {\n        const pastEvents = [...state.pastEvents, event];\n        return { ...state, pastEvents };\n      }\n    }\n\n    case GET_EVENTS_SUCCESS: {\n      let { pastEvents, futureEvents } = eventService.sortEvents(action.payload.data);\n      return { ...state, pastEvents, futureEvents };\n    }\n\n    case SHOW_NEW_EVENT_FORM: {\n      return { ...state, showNewEventForm: action.payload.data };\n    }\n\n    case SET_NEW_EVENT: {\n      return { ...state, newEvent: action.payload.data };\n    }\n\n    case LOADING_START: {\n      return { ...state, loading: true };\n    }\n\n    case LOADING_END: {\n      return { ...state, loading: false };\n    }\n\n    default: {\n      return { ...state };\n    }\n  }\n};\n","import { combineReducers } from 'redux';\nimport { eventReducer } from './event.reducer';\n\nexport const rootReducer = combineReducers({\n  event: eventReducer,\n});\n","import { put, call, takeEvery } from 'redux-saga/effects';\nimport { eventService } from '../../services/event.service';\nimport { eventActions } from '../actions/event.actions';\nimport { ADD_EVENT, GET_EVENTS } from '../types/event.types';\n\n\nfunction* addEventWorker(action) {\n  try {\n    yield put(eventActions.loadingStart());\n    const event = yield call(eventService.addEvent, action.payload.data);\n    yield put(eventActions.showForm(false));\n    yield put(eventActions.addEventSuccess(event));\n  } catch (e) {\n    yield put(eventActions.addEventError(e));\n  } finally {\n    yield put(eventActions.loadingEnd());\n  }\n}\n\nfunction* getEventsWorker() {\n  try {\n    yield put(eventActions.loadingStart());\n    const events = yield call(eventService.getEvents);\n    yield put(eventActions.getEventsSuccess(events));\n  } catch (e) {\n    yield put(eventActions.getEventsError(e));\n  } finally {\n    yield put(eventActions.loadingEnd());\n  }\n}\n\nexport const eventSagas = [\n  takeEvery(ADD_EVENT, addEventWorker),\n  takeEvery(GET_EVENTS, getEventsWorker),\n];\n","import { all } from 'redux-saga/effects';\nimport { eventSagas } from './event.sagas';\n\n\nexport function* rootSaga() {\n  yield all([...eventSagas]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer } from './reducers';\nimport { rootSaga } from './sagas/rootSaga';\n\nconst saga = createSagaMiddleware();\n\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(saga)));\n\nsaga.run(rootSaga);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}